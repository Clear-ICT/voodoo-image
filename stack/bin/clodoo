#!/usr/bin/env bash
set -eo pipefail;

find_remotes() {
  remotes=$(git remote -v | grep 'akretion@\|api@' | grep push)
  echo "$remotes"
}

find_remote_ssh() {
  local remote=$1
  if [[ -z "$remote" ]]; then
    local remotes=$(find_remotes)
    lc=$(echo "$remotes" | wc -l)
    if [[ "$lc" -gt "1" ]]; then
      echo "0"
      return 0
    fi
  else
    local remotes=$(find_remotes | grep "^$remote")
  fi

  echo "$remotes" | tr " " "\n" | tr "\t" "\n" | head -2 | tail -1 | tr ":" "\n" | head -1
}

find_app() {
  local remote=$1
  if [[ -z "$remote" ]]; then
    local remotes=$(find_remotes)
  else
    local remotes=$(find_remotes | grep "^$remote")
  fi
  echo "$remotes" | tr ":" "\n" | tr " " "\n" | head -2 | tail -1
}

is_remote() {
  remote=$1
  remotes=$(find_remotes)
  if [[ -z $(echo "$remotes" | tr "\t" "\n" | tr " " "\n" | grep -v "@" | grep -v "(push)" | grep "^$remote$") ]]; then
    return 1
  else
    return 0
  fi
}


# *************************** COMMAND DISPATCH ********************

cmd=$1
if is_remote "$2" ; then
  remote=$2
  echo "assuming using remote $remote"
  shift # for remote
else
  remote=""
fi
shift # for cmd

remote_ssh=$(find_remote_ssh "$remote")
if [[ "$remote_ssh" == "0" ]]; then
  echo "Ambiguous remote! Which of the following remotes are you talking about?"
  echo "$remotes"
  echo ""
  echo "Hint: use:"
  echo "clodoo cmd remote options"
  exit 1
fi

app=$(find_app "$remote")

case $cmd in

  pull)
    git pull "$remote_ssh:$app" master
    ;;

  push)
    git push "$remote_ssh:$app" master
    ;;

  db:pull)
    ;;

  db::push)
    echo "TODO"
    ;;

  fs::pull)
    echo "TODO"
    ;;

  fs::push)
    echo "TODO"
    ;;

  help)
    remote_help=$(ssh "$remote_ssh" help)
    cat<<EOF
    Usage:
      clodoo COMMAND <REMOTE> [command-specific-options]

    Commands:
      help      Display help
      pull      Pull project code using git
      push      Push project code using git
      db:pull   Replace local database using remote database
      db:push   Replace remote database using local database
      fs::pull  Update local filestore content with remote one
      fs:push   Update remote filestore content with local one

      $remote_help
EOF
    ;;

  *)
    ssh "$remote_ssh" "$cmd" "$app" "$@"
    ;;

esac
