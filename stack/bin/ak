#!/usr/bin/env bash
set -e

SERVER=${SERVER:="$2.akretion.com"}
POSTGRESQL_DB=${POSTGRESQL_DB:="db"}
POSTGRESQL_DATA=${POSTGRESQL_DATA:="/workspace/.db"}
WORKDIR=${WORKDIR:="/workspace"}
DOCKER_USER=${DOCKER_USER:="developer"}
BUILDOUT=${BUILDOUT:="buildout.dev.cfg"}


# *************************** INITIALISATION FIRST RUN ********************

# Link the shared eggs folder or init a new one
if $SHARED_EGGS; then
  for folder in eggs develop-eggs downloads
  do
    if [ ! -d "$SHARED_FOLDER/$folder" ]; then
        mkdir $SHARED_FOLDER/$folder
    fi
    if [ ! -d "$WORKDIR/$folder" ]; then
      ln -s $SHARED_FOLDER/$folder $WORKDIR/$folder
    fi
  done
elif [ ! -d "$WORKDIR/eggs" ]; then
  mkdir $WORKDIR/eggs
fi

if [[ -z $(ls "/$WORKDIR/eggs" | grep reportlab) ]]; then
  echo "initializing shared host eggs directory from Docker image"
  cp "$IMAGE_EGGS_DIR"/. /$WORKDIR/eggs -R
fi

# Generate bin/buildout if missing
if [ ! -f "$WORKDIR/bin/buildout" ]; then 
  echo "Bootstrapping Buildout..."
  cd $WORKDIR
  wget https://raw.github.com/buildout/buildout/master/bootstrap/bootstrap.py
  python bootstrap.py
  rm bootstrap.py
fi

# *************************** COMMAND DISPATCH ********************

case $1 in

  run)
    shift
    [ ! -f "$WORKDIR/bin/start_openerp" ] || [ ! -f "$WORKDIR/parts/odoo/setup.py" ] && \
    export FROM_BASH=true && ak build
    ak wait_postgres
    python "$WORKDIR/bin/start_openerp" "$@"
    ;;

  debug)
    shift
    ak wait_postgres
    python "$WORKDIR/bin/start_openerp" "$@" "--debug"
    ;;

  build)
    shift
    echo "building project with Anybox Buildout recipe..."
    python "$WORKDIR/bin/buildout" "$@" "-c" "$BUILDOUT"
    ;;

  up)
    shift
    export FROM_BASH=true
    ak build
    ak run "$@"
    ;;

  console)
    shift
    ak wait_postgres
    python "$WORKDIR/bin/python_openerp" "$@"
    ;;

  psql)
    shift
    ak wait_postgres
    if [ -z "$1" ]; then
      psql db
    else
      psql "$@"
    fi
    ;;

  wait_postgres)
    [ ! -d /etc/service/postgresql ] && exit
    [ -f /.devstep/log/postgresql.log ] && r=$(grep "ready to accept connections" /.devstep/log/postgresql.log)
    [ -z "$r" ] && echo "waiting for Postgresql embedded server to start..."
    while [ -z "$r" ]
    do
      sleep 0.1
      [ -f  /.devstep/log/postgresql.log ] && r=$(grep "ready to accept connections" /.devstep/log/postgresql.log)
    done
    sleep 0.01
    if [ -z "$(psql -l | grep db | grep $DOCKER_USER)" ]; then
      sleep 0.3
      psql -c "ALTER DATABASE db OWNER TO $DOCKER_USER;"
      sleep 0.3
    fi
    exit
    ;;

  help)
    cat<<EOF

    available commands are:
    run, debug, build, up, console, psql, help

EOF
    ;;

  *)
    [ ! -z "$1" ] && exec ssh "$SSH_USER@$SERVER" "$@"
    ;;

esac
